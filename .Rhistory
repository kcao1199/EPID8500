var_within
library(here)
data2<- read.csv(here("data", "cleaned_cdc_data.csv"))
View(data2)
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv", stringsAsFactors = FALSE)
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
# Summarize prevalence for the entire US
US_df <- data %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "US") # Add a region column
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
filter(state_name == "Georgia") %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "Georgia") # Add a region column
# Summarize prevalence for the entire US
US_df <- data %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "US") # Add a region column
# Combine the datasets
combined_df <- bind_rows(Georgia_df, US_df)
# Plot the combined time series
ggplot(combined_df, aes(x = year, y = prevalence, color = region, group = region)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(combined_df$year), max(combined_df$year), by = 1)) + # Set x-axis to whole numbers
labs(title = "Time Series of HIV Prevalence in Georgia vs US",
x = "Year", y = "Prevalence (%)", color = "Region") +
theme_minimal()
figure_file = here("results", "figures", "time_series.png")
ggsave(filename = figure_file)
#############################################################################
#############################################################################
# Distribution of prevalence rates in the US
ggplot(data, aes(x = prevalence)) +
geom_histogram(binwidth = 1, fill = "blue", color = "white", alpha = 0.7) +
labs(title = "Distribution of Prevalence Rates", x = "Prevalence (%)", y = "Count") +
theme_minimal()
figure_file = here("results", "figures", "distribution.png")
ggsave(filename = figure_file)
# Age group stratification
age_group_df <- data %>%
filter(strat_group=='Age Group')%>%
group_by(strat_value) %>%
summarize(avg_prevalence = mean(prevalence, na.rm = TRUE))
colnames(age_group_df)[1] <- "Age Group"
# Load map data for the US states
us_map <- map_data("state")
# Summarize the prevalence data by state
state_df <- data %>%
group_by(state_name) %>%
summarize(avg_prevalence = mean(prevalence, na.rm = TRUE))
# Ensure the state names are in lowercase to match map data format
state_df$state_name <- tolower(state_df$state_name)
# Merge the map data with the state prevalence data
us_map_data <- left_join(us_map, state_df, by = c("region" = "state_name"))
# Plot the map with average prevalence
ggplot(us_map_data, aes(x = long, y = lat, group = group, fill = avg_prevalence)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
labs(title = "Heatmap of HIV Prevalence Across US States", fill = "Average Prevalence (%)") +
theme_minimal()
figure_file = here("results", "figures", "heatmap.png")
ggsave(filename = figure_file)
# Add a new column for 'source' to distinguish between datasets
data$source <- "USA"
Georgia_df <- data %>%
filter(state_name == "Georgia") %>%
mutate(source = "Georgia")
# Combine the datasets
combined_data <- bind_rows(data, Georgia_df)
# Side-by-side box plot with stratification groups and source
ggplot(combined_data, aes(x = strat_group, y = prevalence, fill = strat_group)) +
geom_boxplot(position = position_dodge(width = 0.8),
outlier.size = 2, outlier.colour = "red", outlier.shape = 16) +  # Highlight outliers
facet_wrap(~source, scales = "free_y") +  # Make sure each facet has its own y-axis range
labs(title = "Prevalence by Stratification Group",
x = "Stratification Group",
y = "Prevalence (%)") +
scale_fill_brewer(palette = "Set3") +  # Use a nice color palette
theme_minimal(base_size = 14) +  # Clean minimal theme with larger text
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text
axis.title = element_text(size = 14, face = "bold"),  # Bold axis titles
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centered plot title
strip.text = element_text(size = 14, face = "bold"),  # Bold facet labels
legend.position = "none"  # Remove the legend as it's unnecessary
)
figure_file = here("results", "figures", "prevalence_strat_boxplot.png")
ggsave(filename = figure_file)
# Summarize the data by year and stratification group (mean prevalence)
summary_data <- data %>%
group_by(year, strat_group) %>%
summarize(mean_prevalence = mean(prevalence, na.rm = TRUE))
# Summarize the data by year and stratification group (mean prevalence)
summary_data <- data %>%
group_by(year, strat_group) %>%
summarize(mean_prevalence = mean(prevalence, na.rm = TRUE))
# Summarize the data by year and stratification group (mean prevalence)
summary_data <- data %>%
group_by(year, strat_group) %>%
summarize(mean_prevalence = mean(prevalence, na.rm = TRUE))
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv", stringsAsFactors = FALSE)
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
# Summarize prevalence for the entire US
US_df <- data %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "US") # Add a region column
# Combine the datasets
combined_df <- bind_rows(Georgia_df, US_df)
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv", stringsAsFactors = FALSE)
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
filter(state_name == "Georgia") %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "Georgia") # Add a region column
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv", stringsAsFactors = FALSE)
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv")
# Load the dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv"))
#############################################################################
#############################################################################
# Summarize prevalence for Georgia
Georgia_df <- data %>%
filter(state_name == "Georgia") %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "Georgia") # Add a region column
# Summarize prevalence for the entire US
US_df <- data %>%
group_by(year) %>%
summarize(prevalence = mean(prevalence, na.rm = TRUE)) %>%
mutate(region = "US") # Add a region column
# Combine the datasets
combined_df <- bind_rows(Georgia_df, US_df)
# Plot the combined time series
ggplot(combined_df, aes(x = year, y = prevalence, color = region, group = region)) +
geom_line(size = 1) +
geom_point(size = 2) +
scale_x_continuous(breaks = seq(min(combined_df$year), max(combined_df$year), by = 1)) + # Set x-axis to whole numbers
labs(title = "Time Series of HIV Prevalence in Georgia vs US",
x = "Year", y = "Prevalence (%)", color = "Region") +
theme_minimal()
figure_file = here("results", "figures", "time_series.png")
ggsave(filename = figure_file)
#############################################################################
#############################################################################
# Distribution of prevalence rates in the US
ggplot(data, aes(x = prevalence)) +
geom_histogram(binwidth = 1, fill = "blue", color = "white", alpha = 0.7) +
labs(title = "Distribution of Prevalence Rates", x = "Prevalence (%)", y = "Count") +
theme_minimal()
figure_file = here("results", "figures", "distribution.png")
ggsave(filename = figure_file)
# Age group stratification
age_group_df <- data %>%
filter(strat_group=='Age Group')%>%
group_by(strat_value) %>%
summarize(avg_prevalence = mean(prevalence, na.rm = TRUE))
colnames(age_group_df)[1] <- "Age Group"
# Load map data for the US states
us_map <- map_data("state")
# Summarize the prevalence data by state
state_df <- data %>%
group_by(state_name) %>%
summarize(avg_prevalence = mean(prevalence, na.rm = TRUE))
# Ensure the state names are in lowercase to match map data format
state_df$state_name <- tolower(state_df$state_name)
# Merge the map data with the state prevalence data
us_map_data <- left_join(us_map, state_df, by = c("region" = "state_name"))
# Plot the map with average prevalence
ggplot(us_map_data, aes(x = long, y = lat, group = group, fill = avg_prevalence)) +
geom_polygon(color = "white") +
coord_fixed(1.3) +
labs(title = "Heatmap of HIV Prevalence Across US States", fill = "Average Prevalence (%)") +
theme_minimal()
figure_file = here("results", "figures", "heatmap.png")
ggsave(filename = figure_file)
# Add a new column for 'source' to distinguish between datasets
data$source <- "USA"
Georgia_df <- data %>%
filter(state_name == "Georgia") %>%
mutate(source = "Georgia")
# Combine the datasets
combined_data <- bind_rows(data, Georgia_df)
# Side-by-side box plot with stratification groups and source
ggplot(combined_data, aes(x = strat_group, y = prevalence, fill = strat_group)) +
geom_boxplot(position = position_dodge(width = 0.8),
outlier.size = 2, outlier.colour = "red", outlier.shape = 16) +  # Highlight outliers
facet_wrap(~source, scales = "free_y") +  # Make sure each facet has its own y-axis range
labs(title = "Prevalence by Stratification Group",
x = "Stratification Group",
y = "Prevalence (%)") +
scale_fill_brewer(palette = "Set3") +  # Use a nice color palette
theme_minimal(base_size = 14) +  # Clean minimal theme with larger text
theme(
axis.text.x = element_text(angle = 45, hjust = 1),  # Rotate x-axis text
axis.title = element_text(size = 14, face = "bold"),  # Bold axis titles
plot.title = element_text(size = 16, face = "bold", hjust = 0.5),  # Centered plot title
strip.text = element_text(size = 14, face = "bold"),  # Bold facet labels
legend.position = "none"  # Remove the legend as it's unnecessary
)
figure_file = here("results", "figures", "prevalence_strat_boxplot.png")
ggsave(filename = figure_file)
# Summarize the data by year and stratification group (mean prevalence)
summary_data <- data %>%
group_by(year, strat_group) %>%
summarize(mean_prevalence = mean(prevalence, na.rm = TRUE))
ggplot(summary_data, aes(x = year, y = mean_prevalence, color = strat_group)) +
geom_line() +
facet_wrap(~ strat_group, scales = "free_y") +
scale_x_continuous(
breaks = seq(min(summary_data$year), max(summary_data$year), by = 2)  # Skip every other year
) +
labs(title = "Time Trends by Stratification Group", x = "Year", y = "Mean Prevalence (%)") +
theme_minimal()
figure_file = here("results", "figures", "time_trend_strat.png")
ggsave(filename = figure_file)
source("D:/EPID8500/linear_regression.R", echo=TRUE)
# Remove the intercept for clarity
coef_df <- coef_df[coef_df$StratValue != "(Intercept)", ]
# Rank by p-value in ascending order
coef_df <- coef_df[order(coef_df$pValue), ]
# Create a formatted HTML table using kable
table <- kable(coef_df,
format = "html",
caption = "Table: Coefficients and p-values for Stratification Determinants (Linear Regression)",
digits = 4,
col.names = c("Determinant", "Coefficient", "Standard Error", "t-Value", "p-Value"),
row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
# Save the table as an HTML file
save_kable(table, file = "results/table/linear_regression.html")
# Load and prepare the data
data <- read.csv("data/Georgia_df.csv", stringsAsFactors = FALSE)
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv")
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv")
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv")
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Fit a linear regression model
fitall <- lm(prevalence ~ strat_value, data = data)
# Extract coefficients and p-values from the model
coef_table <- summary(fitall)$coefficients
# Create a data frame with coefficients and p-values, rounding values
coef_df <- data.frame(
StratValue = gsub("strat_value", "", rownames(coef_table)),  # Remove 'strat_value' prefix
Coefficient = round(coef_table[, 1], 4),  # Coefficients
StdError = round(coef_table[, 2], 4),  # Standard Errors
tValue = round(coef_table[, 3], 4),  # t-Values
pValue = round(coef_table[, 4], 4)  # p-Values
)
# Remove the intercept for clarity
coef_df <- coef_df[coef_df$StratValue != "(Intercept)", ]
# Rank by p-value in ascending order
coef_df <- coef_df[order(coef_df$pValue), ]
# Create a formatted HTML table using kable
table <- kable(coef_df,
format = "html",
caption = "Table: Coefficients and p-values for Stratification Determinants (Linear Regression)",
digits = 4,
col.names = c("Determinant", "Coefficient", "Standard Error", "t-Value", "p-Value"),
row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
# Save the table as an HTML file
save_kable(table, file = "results/table/linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = here("results", "table", "linear_regression.html"))
path = here("results", "table", "linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = path)
path = here("results", "tables", "linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = path)
path2 = here("results", "table", "linear_regression.png"))
path2 = here("results", "table", "linear_regression.png")
# Save the HTML table as a PNG using webshot
webshot("linear_regression.html", file = path2)
# Load and prepare the data
data <- read.csv("data/Georgia_df.csv", stringsAsFactors = FALSE)
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Fit an ANOVA model
anova_model <- aov(prevalence ~ strat_value, data = data)
# Extract ANOVA table
anova_table <- summary(anova_model)[[1]]
# Create a data frame with ANOVA results
anova_df <- data.frame(
Determinant = rownames(anova_table),  # Determinants (Factor Levels)
SumSq = round(anova_table[, "Sum Sq"], 4),  # Sum of Squares
Df = anova_table[, "Df"],  # Degrees of Freedom
MeanSq = round(anova_table[, "Mean Sq"], 4),  # Mean Squares
FValue = round(anova_table[, "F value"], 4),  # F-statistic
pValue = round(anova_table[, "Pr(>F)"], 4)  # p-value
)
# Remove residual row from the table for clarity
anova_df <- anova_df[rownames(anova_df) != "Residuals", ]
# Rank by p-value in ascending order
anova_df <- anova_df[order(anova_df$pValue), ]
# Save the table as a PNG file
path = here("results", "table", "anova_results.png"))
# Save the table as a PNG file
path = here("results", "table", "anova_results.png")
png(path, width = 800, height = 600, res = 120)
# Create a table using gridExtra and display it
grid.table(anova_df)
library(gridExtra)
png(path, width = 800, height = 600, res = 120)
# Save the table as a PNG file
path = here("results", "tables", "anova_results.png")
png(path, width = 800, height = 600, res = 120)
# Save the HTML table as a PNG using webshot
webshot("linear_regression.html", file = path2)
# Load necessary libraries
library(dplyr)
library(tidyr)
library(knitr)
library(kableExtra)
library(webshot)
library(here)
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Fit a linear regression model
fitall <- lm(prevalence ~ strat_value, data = data)
# Extract coefficients and p-values from the model
coef_table <- summary(fitall)$coefficients
# Create a data frame with coefficients and p-values, rounding values
coef_df <- data.frame(
StratValue = gsub("strat_value", "", rownames(coef_table)),  # Remove 'strat_value' prefix
Coefficient = round(coef_table[, 1], 4),  # Coefficients
StdError = round(coef_table[, 2], 4),  # Standard Errors
tValue = round(coef_table[, 3], 4),  # t-Values
pValue = round(coef_table[, 4], 4)  # p-Values
)
# Remove the intercept for clarity
coef_df <- coef_df[coef_df$StratValue != "(Intercept)", ]
# Rank by p-value in ascending order
coef_df <- coef_df[order(coef_df$pValue), ]
# Create a formatted HTML table using kable
table <- kable(coef_df,
format = "html",
caption = "Table: Coefficients and p-values for Stratification Determinants (Linear Regression)",
digits = 4,
col.names = c("Determinant", "Coefficient", "Standard Error", "t-Value", "p-Value"),
row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
path = here("results", "tables", "linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = path)
path2 = here("results", "table", "linear_regression.png")
# Save the HTML table as a PNG using webshot
webshot("linear_regression.html", file = path2)
# Save the HTML table as a PNG using webshot
webshot("linear_regression.html", file = path2)
path = here("results", "tables", "linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = path)
path2 = here("results", "tables", "linear_regression.png")
# Save the HTML table as a PNG using webshot
webshot("linear_regression.html", file = path2)
setwd("D:/EPID8500")
webshot("linear_regression.html", "linear_regression.png")
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Fit a linear regression model
fitall <- lm(prevalence ~ strat_value, data = data)
# Extract coefficients and p-values from the model
coef_table <- summary(fitall)$coefficients
# Create a data frame with coefficients and p-values, rounding values
coef_df <- data.frame(
StratValue = gsub("strat_value", "", rownames(coef_table)),  # Remove 'strat_value' prefix
Coefficient = round(coef_table[, 1], 4),  # Coefficients
StdError = round(coef_table[, 2], 4),  # Standard Errors
tValue = round(coef_table[, 3], 4),  # t-Values
pValue = round(coef_table[, 4], 4)  # p-Values
)
# Remove the intercept for clarity
coef_df <- coef_df[coef_df$StratValue != "(Intercept)", ]
# Rank by p-value in ascending order
coef_df <- coef_df[order(coef_df$pValue), ]
# Create a formatted HTML table using kable
table <- kable(coef_df,
format = "html",
caption = "Table: Coefficients and p-values for Stratification Determinants (Linear Regression)",
digits = 4,
col.names = c("Determinant", "Coefficient", "Standard Error", "t-Value", "p-Value"),
row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
path = here("results", "tables", "linear_regression.html")
# Save the table as an HTML file
save_kable(table, file = path)
webshot("linear_regression.html", "linear_regression.png")
webshot(path, "linear_regression.png")
webshot(path, "results/tables/linear_regression.png")
stview(summary_output, file = "eda_summary.html")
# Load the cleaned dataset
data <- read.csv(here("data", "cleaned_cdc_data.csv")
# Inspect the Dataset
str(data)
summary(data)
# Check for Missing Values
missing_vals <- colSums(is.na(data))
print(missing_vals)
# Visualize missing data
gg_miss_var(data) +
labs(title = "Missing Values by Column")
# Descriptive Statistics
summary_output <- dfSummary(data)  # Summary statistics
stview(summary_output, file = "eda_summary.html")
stview(summary_output, file = "results/tables/eda_summary.html")
webshot("results/tables/eda_summary.html", "results/tables/eda_summary.png")
# Load and prepare the data
data <- read.csv(here("data", "Georgia_df.csv"))
# Fit an ANOVA model
anova_model <- aov(prevalence ~ strat_value, data = data)
# Extract ANOVA table
anova_table <- summary(anova_model)[[1]]
# Create a data frame with ANOVA results
anova_df <- data.frame(
Determinant = rownames(anova_table),  # Determinants (Factor Levels)
SumSq = round(anova_table[, "Sum Sq"], 4),  # Sum of Squares
Df = anova_table[, "Df"],  # Degrees of Freedom
MeanSq = round(anova_table[, "Mean Sq"], 4),  # Mean Squares
FValue = round(anova_table[, "F value"], 4),  # F-statistic
pValue = round(anova_table[, "Pr(>F)"], 4)  # p-value
)
# Remove residual row from the table for clarity
anova_df <- anova_df[rownames(anova_df) != "Residuals", ]
# Rank by p-value in ascending order
anova_df <- anova_df[order(anova_df$pValue), ]
# Save the table as a PNG file
path = here("results", "tables", "anova_results.png")
png(path, width = 800, height = 600, res = 120)
# Remove residual row from the table for clarity
anova_df <- anova_df[rownames(anova_df) != "Residuals", ]
# Rank by p-value in ascending order
anova_df <- anova_df[order(anova_df$pValue), ]
# Create a data frame with ANOVA results
anova_df <- data.frame(
Determinant = rownames(anova_table),  # Determinants (Factor Levels)
SumSq = round(anova_table[, "Sum Sq"], 4),  # Sum of Squares
Df = anova_table[, "Df"],  # Degrees of Freedom
MeanSq = round(anova_table[, "Mean Sq"], 4),  # Mean Squares
FValue = round(anova_table[, "F value"], 4),  # F-statistic
pValue = round(anova_table[, "Pr(>F)"], 4)  # p-value
)
# Remove residual row from the table for clarity
anova_df <- anova_df[rownames(anova_df) != "Residuals", ]
# Rank by p-value in ascending order
anova_df <- anova_df[order(anova_df$pValue), ]
anova_df
# Create a table using gridExtra and display it
grid.table(anova_df)
dev.off()  # Close the graphics device
source("~/.active-rstudio-document", echo=TRUE)
print(metrics)
source("~/.active-rstudio-document", echo=TRUE)
# Print the ranked determinants
print(ranked_determinants)
View(ranked_determinants)
metrics
source("D:/EPID8500/analysis/linear_regression.R", echo=TRUE)
# Print the ranked determinants
print(ranked_determinants)
# Create a formatted HTML table using kable
table <- kable(coef_df,
format = "html",
caption = "Table: Coefficients and p-values for Stratification Determinants (Linear Regression)",
digits = 4,
col.names = c("Determinant", "Coefficient", "Standard Error", "t-Value", "p-Value"),
row.names = FALSE) %>%
kable_styling(bootstrap_options = c("striped", "hover", "condensed"),
full_width = FALSE)
table
print(metrics)  # Print performance metrics
# Check for multicollinearity
print(vif(lm(prevalence ~ ., data = train_data)))
