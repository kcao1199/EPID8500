ggplot(data, aes(x = data_value)) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Data Values", x = "Data Value", y = "Frequency") +
theme_minimal()
# Boxplot of data_value by stratification group
ggplot(data, aes(x = strat_group, y = Data_value)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot of data_value by stratification group
ggplot(data, aes(x = strat_group, y = Data_Value)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot of data_value by stratification group
ggplot(data, aes(x = Break_out, y = Data_value)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot of data_value by stratification group
ggplot(data, aes(x = Break_Out, y = Data_value)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_abbreviation = locationabbr,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
data_value = prevalence,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
# Remove duplicate rows if any
cleaned_data <- cleaned_data %>%
distinct()
# Load the dataset
data <- read.csv("BRFSS__Table_of_HIV-AIDS_20241116.csv", stringsAsFactors = FALSE)
# View initial structure of the dataset
str(data)
# Selecting Columns to use
cleaned_data <- data %>%
select(
Year,
Locationdesc,         # State Name
Class,                # Class Description
Topic,                # Topic Description
Question,             # Question Text
Response,             # Evaluated Response
Break_Out,            # Stratification Value
Break_Out_Category,   # Stratification Grouping
Sample_Size,          # Sample size used
Data_value,           # Main data value
Confidence_limit_Low, # Low confidence limit
Confidence_limit_High,# High confidence limit
Data_value_unit,      # Unit of the data value
Data_value_type       # Type of data value (e.g., prevalence)
)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Locationabbr) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value)
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_abbreviation = locationabbr,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
data_value = prevalence,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
# Load the dataset
data <- read.csv("BRFSS__Table_of_HIV-AIDS_20241116.csv", stringsAsFactors = FALSE)
# View initial structure of the dataset
str(data)
# Selecting Columns to use
cleaned_data <- data %>%
select(
Year,
Locationdesc,         # State Name
Class,                # Class Description
Topic,                # Topic Description
Question,             # Question Text
Response,             # Evaluated Response
Break_Out,            # Stratification Value
Break_Out_Category,   # Stratification Grouping
Sample_Size,          # Sample size used
Data_value,           # Main data value
Confidence_limit_Low, # Low confidence limit
Confidence_limit_High,# High confidence limit
Data_value_unit,      # Unit of the data value
Data_value_type       # Type of data value (e.g., prevalence)
)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Locationabbr) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value)
)
View(data)
View(cleaned_data)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value)
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_abbreviation = locationabbr,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
data_value = prevalence,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
data_value = prevalence,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
prevalence = Data_value,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
View(cleaned_data)
# Selecting Columns to use
cleaned_data <- data %>%
select(
Year,
Locationdesc,         # State Name
Class,                # Class Description
Topic,                # Topic Description
Question,             # Question Text
Response,             # Evaluated Response
Break_Out,            # Stratification Value
Break_Out_Category,   # Stratification Grouping
Sample_Size,          # Sample size used
Data_value,           # Main data value
Confidence_limit_Low, # Low confidence limit
Confidence_limit_High,# High confidence limit
Data_value_type       # Type of data value (e.g., prevalence)
)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value)
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
prevalence = Data_value,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_unit = data_value_unit,
value_type = data_value_type
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
prevalence = Data_Value,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_type = data_value_type
)
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
prevalence = Data_value,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_type = data_value_type
)
cleaned_data$Data_value
# Standardize column names for easier usage
cleaned_data <- cleaned_data %>%
rename_with(~ str_to_lower(.), everything()) %>% # Convert column names to lowercase
rename(
year = year,
state_name = locationdesc,
class_desc = class,
topic_desc = topic,
question_text = question,
response_text = response,
strat_value = break_out,
strat_group = break_out_category,
sample_size = sample_size,
prevalence = data_value,
conf_low = confidence_limit_low,
conf_high = confidence_limit_high,
value_type = data_value_type
)
# Remove duplicate rows if any
cleaned_data <- cleaned_data %>%
distinct()
# Export cleaned data to a new CSV file
write.csv(cleaned_data, "cleaned_cdc_data.csv", row.names = FALSE)
# Summary of the cleaned dataset
summary(cleaned_data)
View(cleaned_data)
# Filter data for state_name = "Georgia"
georgia_data <- data %>%
filter(state_name == "Georgia")
View(data)
View(cleaned_data)
# Filter data for state_name = "Georgia"
georgia_data <- cleaned_data %>%
filter(state_name == "Georgia")
View(georgia_data)
# Boxplot of data_value by stratification group
ggplot(data, aes(x = Break_Out, y = Data_value)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Visualizations
# Distribution of data_value
ggplot(data, aes(x = data_value)) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Data Values", x = "Data Value", y = "Frequency") +
theme_minimal()
# Load the cleaned dataset
data <- read.csv("cleaned_cdc_data.csv", stringsAsFactors = FALSE)
# Visualizations
# Distribution of data_value
ggplot(data, aes(x = data_value)) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Data Values", x = "Data Value", y = "Frequency") +
theme_minimal()
View(data)
# Visualizations
# Distribution of data_value
ggplot(data, aes(x = prevalence)) +
geom_histogram(binwidth = 1, fill = "blue", alpha = 0.7) +
labs(title = "Distribution of Data Values", x = "Data Value", y = "Frequency") +
theme_minimal()
# Boxplot of prevalence by stratification group
ggplot(data, aes(x = Break_Out, y = prevalence)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Boxplot of prevalence by stratification group
ggplot(data, aes(x = Break_Out, y = prevalence)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
View(data)
# Boxplot of prevalence by stratification group
ggplot(data, aes(x = strat_value, y = prevalence)) +
geom_boxplot(fill = "orange", alpha = 0.6) +
labs(title = "Boxplot of Data Values by Stratification Group", x = "Stratification Group", y = "Data Value") +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
table(data$strat_value)
# Trend over time (Year vs prevalence)
ggplot(data, aes(x = year, y = prevalence, group = strat_group, color = strat_group)) +
geom_line() +
geom_point(size = 2) +
labs(title = "Trends in Data Value Over Time by Stratification Group", x = "Year", y = "Data Value") +
theme_minimal()
# Trend over time (Year vs prevalence)
ggplot(data, aes(x = year, y = prevalence, group = strat_group, color = strat_group)) +
geom_line() +
geom_point(size = 2) +
labs(title = "Trends in Data Value Over Time by Stratification Group", x = "Year", y = "Data Value") +
theme_minimal()
# Trend over time (Year vs prevalence)
ggplot(data, aes(x = year, y = prevalence)) +
geom_line() +
geom_point(size = 2) +
labs(title = "Trends in Data Value Over Time by Stratification Group", x = "Year", y = "Data Value") +
theme_minimal()
# Convert year to integer (if it's not already)
data$year <- as.integer(data$year)
# Aggregate data to get the mean prevalence for each year and stratification group
aggregated_data <- data %>%
group_by(year, strat_group) %>%
summarise(prevalence = mean(data_value, na.rm = TRUE)) %>%
ungroup()
# Aggregate data to get the mean prevalence for each year and stratification group
aggregated_data <- data %>%
group_by(year, strat_value) %>%
summarise(prevalence = mean(data_value, na.rm = TRUE)) %>%
ungroup()
strat_value
# Load necessary libraries
library(dplyr)
library(ggplot2)
# Convert year to integer (if it's not already)
data$year <- as.integer(data$year)
View(data)
# Aggregate data to get the mean prevalence for each year and stratification group
aggregated_data <- data %>%
group_by(year, strat_group) %>%
summarise(prevalence = mean(strat_value, na.rm = TRUE)) %>%
ungroup()
# Plot the trend over time
ggplot(aggregated_data, aes(x = year, y = prevalence, group = strat_group, color = strat_group)) +
geom_line() +
geom_point(size = 2) +
labs(
title = "Trends in Prevalence Over Time by Stratification Group",
x = "Year",
y = "Prevalence"
) +
theme_minimal()
View(data)
View(aggregated_data)
summarise(prevalence = mean(strat_value, na.rm = TRUE)
summarise(prevalence = mean(strat_value, na.rm = TRUE)
colnames(data)
source("~/.active-rstudio-document", echo=TRUE)
data_value
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
# Plot the trend
ggplot(aggregated_data, aes(x = year, y = prevalence, group = strat_group, color = strat_group)) +
geom_line() +
geom_point(size = 2) +
labs(
title = "Trends in Prevalence Over Time by Stratification Group",
x = "Year",
y = "Prevalence"
) +
theme_minimal()
print(head(aggregated_data))
setwd("D:/")
library(DataExplorer)
install.packages('DataExplorer')
# Scatterplot: Confidence limits
ggplot(data, aes(x = conf_low, y = conf_high, color = data_value)) +
geom_point(alpha = 0.6) +
labs(title = "Confidence Limits Scatterplot", x = "Low Confidence Limit", y = "High Confidence Limit") +
theme_minimal()
data_value
# Scatterplot: Confidence limits
ggplot(data, aes(x = conf_low, y = conf_high, color = strat_value)) +
geom_point(alpha = 0.6) +
labs(title = "Confidence Limits Scatterplot", x = "Low Confidence Limit", y = "High Confidence Limit") +
theme_minimal()
# Bar plot for categorical variables
ggplot(data, aes(x = reorder(state_name, strat_value, FUN = mean), y = strat_value)) +
geom_bar(stat = "summary", fun = "mean", fill = "purple", alpha = 0.7) +
labs(title = "Mean Data Value by State", x = "State", y = "Mean Data Value") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# Bar plot for categorical variables
ggplot(data, aes(x = reorder(state_name, strat_value, FUN = mean), y = strat_value)) +
geom_bar(stat = "summary", fun = "mean", fill = "purple", alpha = 0.7) +
labs(title = "Mean Data Value by State", x = "State", y = "Mean Data Value") +
theme(axis.text.x = element_text(angle = 90, hjust = 1))
# 6. Correlation Analysis
correlation_matrix <- data %>%
select(where(is.numeric)) %>%
cor(use = "complete.obs")
# Correlation Analysis
correlation_matrix <- data %>%
select(where(is.numeric)) %>%
cor(use = "complete.obs")
# Check the proportion of missing values in each numeric column
colSums(is.na(data))
# Check the proportion of missing data in all columns
summary(data)
# Check the proportion of missing values in each numeric column
colSums(is.na(data))
source("D:/data_cleaning.R", echo=TRUE)
View(cleaned_data)
# Load the dataset
data <- read.csv("BRFSS__Table_of_HIV-AIDS_20241116.csv", stringsAsFactors = FALSE)
# View initial structure of the dataset
str(data)
# Selecting Columns to use
cleaned_data <- data %>%
select(
Year,
Locationdesc,         # State Name
Class,                # Class Description
Topic,                # Topic Description
Question,             # Question Text
Response,             # Evaluated Response
Break_Out,            # Stratification Value
Break_Out_Category,   # Stratification Grouping
Sample_Size,          # Sample size used
Data_value,           # Main data value
Confidence_limit_Low, # Low confidence limit
Confidence_limit_High,# High confidence limit
Data_value_type       # Type of data value (e.g., prevalence)
)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value) &
!is.na(conf_low) &
!is.na(conf_high)
)
View(data)
# Removing rows with missing or NA values in critical columns
cleaned_data <- cleaned_data %>%
filter(
!is.na(Year) &
!is.na(Topic) &
!is.na(Question) &
!is.na(Data_value) &
!is.na(Confidence_limit_High) &
!is.na(Confidence_limit_Low)
)
source("D:/data_cleaning.R", echo=TRUE)
